import java.io.*;

// Student1 class implements Serializable interface to enable object serialization
class Student1 implements Serializable {
    private int rollno;
    private String name;
    private float avg;
    private String dept;

    public static int Data = 10;    // static field - belongs to class, not object (NOT serialized)
    public transient int t;         // transient field - will be skipped during serialization

    public Student1() {
        // No-arg constructor (not mandatory, but good practice during deserialization)
    }

    public Student1(int r, String n, float a, String d) {
        rollno = r;
        name = n;
        avg = a;
        dept = d;
        Data = 500;   // Changing static field
        t = 500;      // Transient value (won't be saved)
    }

    // Returns object information as a string
    public String toString() {
        return "\nStudent Details\n" +
                "\nRoll: " + rollno +
                "\nName: " + name +
                "\nAverage: " + avg +
                "\nDept: " + dept +
                "\nData (static): " + Data +      // Will print current value of class field
                "\nTransient (not saved): " + t + "\n"; // Will print 0 after deserialization
    }
}

public class ObjectStreamExample {
    public static void main(String[] args) throws IOException, ClassNotFoundException {

        // ------------------ SERIALIZATION ------------------
//        FileOutputStream fos = new FileOutputStream("D:/Java/Java Language/java/Practice work/InterfacePractice/ObjectStream.txt");
//        ObjectOutputStream oos = new ObjectOutputStream(fos);
//
//        Student1 s = new Student1(9, "Ram", 75.3f, "BA");  // Creating and initializing object
//        oos.writeObject(s);   // Serializing the object
//        fos.close();
//        oos.close();

        // ------------------ DESERIALIZATION ------------------
        FileInputStream fis = new FileInputStream("D:/Java/Java Language/java/Practice work/InterfacePractice/ObjectStream.txt");
        ObjectInputStream ois = new ObjectInputStream(fis);

        Student1 s1 = (Student1) ois.readObject();  // Deserialize object
        System.out.println(s1);                     // Prints object (calls toString())

        ois.close();
        fis.close();
    }
}
/*
========================================================================================
üìö OBJECT STREAMS & JAVA SERIALIZATION ‚Äì DEEP EXPLANATION
========================================================================================

üî∑ WHAT IS SERIALIZATION?
Serialization = Converting a Java object into a byte stream (binary form) to:
- Save it to a file
- Send it over a network
- Persist object state (like caching or session saving)

Deserialization = Reconstructing the original object from that byte stream.

----------------------------------------------------------------------------------------
üß† KEY CONCEPTS:
----------------------------------------------------------------------------------------
1. ‚úÖ To enable serialization:
   ‚û§ Your class MUST implement: java.io.Serializable

2. ‚ùå What does NOT get serialized:
   ‚û§ Fields marked as **transient**
   ‚û§ **static** fields (they belong to class, not to object)
   ‚û§ Anything not Serializable (e.g., Thread, Socket, unless marked transient)

3. üìå Serializable is a *marker interface*:
   ‚û§ It has NO methods.
   ‚û§ It just signals the JVM that the object is eligible for serialization.

4. ‚ö†Ô∏è Class versioning:
   ‚û§ Add this line to avoid compatibility issues:
      `private static final long serialVersionUID = 1L;`
   ‚û§ It's a unique ID used during deserialization to ensure class versions match.

----------------------------------------------------------------------------------------
üîë METHODS IN OBJECT STREAM CLASSES:
----------------------------------------------------------------------------------------

ObjectOutputStream
------------------
- `writeObject(Object obj)`    ‚Üí Serializes an object to the output stream
- `flush()`                    ‚Üí Flushes the stream
- `close()`                    ‚Üí Closes the stream

ObjectInputStream
------------------
- `readObject()`               ‚Üí Reads and reconstructs the object
- `close()`                    ‚Üí Closes the stream

----------------------------------------------------------------------------------------
üß™ EXAMPLE RESULTS (BEHAVIOR OF static & transient):
----------------------------------------------------------------------------------------

Original object created:
  - rollno = 9
  - name = "Ram"
  - avg = 75.3
  - dept = "BA"
  - static Data = 500
  - transient t = 500

After Deserialization:
  - rollno = 9
  - name = "Ram"
  - avg = 75.3
  - dept = "BA"
  - static Data = 10         (because static is not serialized; remains as class default)
  - transient t = 0          (because transient is skipped and default int = 0)

----------------------------------------------------------------------------------------
üì¶ WHEN TO USE OBJECT STREAMS?
----------------------------------------------------------------------------------------
‚úÖ Desktop applications saving object state
‚úÖ Simple backup/restore systems
‚úÖ Java-only systems exchanging objects (RMI, caching)
‚úÖ Writing object arrays or collections to files

----------------------------------------------------------------------------------------
‚õî WHEN NOT TO USE IT:
----------------------------------------------------------------------------------------
‚ùå If you want cross-language compatibility (use JSON/XML instead)
‚ùå If you‚Äôre building distributed microservices (use JSON, Protobuf, etc.)
‚ùå If you‚Äôre dealing with non-serializable types (like sockets or threads)

----------------------------------------------------------------------------------------
üß† BONUS: SERIALIZING MULTIPLE OBJECTS
----------------------------------------------------------------------------------------
You can serialize a list:
    `oos.writeObject(new ArrayList<Student1>());`
And later:
    `ArrayList<Student1> list = (ArrayList<Student1>) ois.readObject();`

========================================================================================
üî• INTERVIEW TIP:
========================================================================================
üí¨ Q: What happens if a class is not Serializable but you try to write it?
üí¨ A: Java throws **NotSerializableException**

üí¨ Q: What is serialVersionUID?
üí¨ A: A unique ID that ensures the class version used to serialize matches the one used to deserialize.
========================================================================================
*/
